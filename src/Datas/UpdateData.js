const updateDatas = [
    {title: '유치원 알리미 openAPI 연동', date:'2024-05-16', auth:'pukkok', file: ''},
    {title: '검색 페이지 구현 1차', date:'2024-05-17', auth:'pukkok', file: ''},
    {title: '검색 페이지 구현 2차', date:'2024-05-20', auth:'pukkok', file: ''},
    {title: '알레르기 표 및 달력 제작', date:'2024-05-23', auth:'pukkok', file: ''},
    {title: '업데이트 예정', date:'2024-04-29', auth:'pukkok', file: ''},
    {title: '업데이트 예정', date:'2024-04-29', auth:'pukkok', file: ''},
    {title: '업데이트 예정', date:'2024-04-29', auth:'pukkok', file: ''},
    {title: '업데이트 예정', date:'2024-04-29', auth:'pukkok', file: ''},
    {title: '업데이트 예정', date:'2024-04-29', auth:'pukkok', file: ''},
]

const updateContents = [
// 1번
`안녕하세요 신입개발자 Pukkok입니다. 

시작부터 문제가 있었는데요.
유치원 알리미 api를 불러오기 위해 서버를 통해 연결 중
http에서 https에 요청을 하니 cors오류가 발생했습니다.
process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0을 이용하여 인증서 유효성 검증을 넘겨 해결했습니다! 

데이터는 시군구, 시도 데이터를 저장하여 불러올 때 마다 사용할수 있게 전체 데이터를 정리했습니다.
(ssgData, sidoData)

이제 데이터를 불러왔으니 데이터를 유치원조회 페이지 제작을 시작하겠습니다.
먼저 왼쪽의 체크박스를 만들었습니다. 불러온 데이터 수를 비교해보니 api연동된 데이터의 수가 실제 데이터의 수 보다 훨씬 적었습니다.
필터를 최소화 하여 같은 기능을 구현할 수 있도록 제작했습니다.
`,
//2번
`안녕하세요 신입개발자 Pukkok입니다.
오늘의 업데이트 내용은 검색 페이지를 구현입니다.
1차적으로 기초 프레임을 구성하고, 필터 옆에 데이터를 불러올수 있도록 구성하였습니다.

필터를 만들던 중 필터가 클릭 될 때마다 state가 변해서 불러오는 데이터가 계속해서 바뀌었었는데,
useRef를 사용하여 일단 클릭한 데이터들의 정보를 가지고 있다가, 아래 검색 버튼을 클릭한 경우에 변할 수 있도록 클릭 후 state에 넣도록 구현하였습니다.
`,
// 3번
`안녕하세요 신입개발자 Pukkok입니다.
검색페이지 구현 2차 업데이트 내용입니다.

검색을 구현하는 중 문제가 발생했습니다.
첫번째는 전체데이터에서 검색을 해야하는 경우가 있었고, 두번째는 필터링된 데이터 중에서 검색을 해야 하는 경우가 있었습니다.
이번 문제를 해결하기 위해
1. 전체데이터, 2. 지역 검색시 데이터로 구분하여 state를 나눴고,
전체데이터는 불러오는 시간이 길어서 처음에 한번만 불러오도록 구현했습니다.
시/도, 시/군/구를 통해 검색할 경우에는 유치원알리미 api의 query를 전달하는 방식으로 사용하려 했으나,
전체 데이터를 한번에 불러오는 api 방식이 없어서(지역마다 각각 불러와야 하는 방식을 사용하는 경우 계속해서 비동기 처리를 해야하기 때문에)
불러온 전체데이터에서 필터링 하는 방법으로 따로 구현하였습니다.
`,
// 4번
`안녕하세요 신입개발자 Pukkok입니다.
오늘의 업데이트 내용은 알레르기표와 달력 커스터마이징 입니다.

원래는 fullCallendar라는 라이브러리를 이용하려 했으나,
원하는 기능이 없어 따로 제작하기로 하였습니다.`
]

export {
    updateDatas,
    updateContents
}